{"version":3,"sources":["wcharid.ts","wstring.ts","wchar.ts","client.ts","editor.tsx","index.tsx"],"names":["compare","a","b","client","clock","le","eq","beg","fin","WString","chars","this","filter","wc","visible","map","value","join","length","index","i","WChar","id","ix","findIndex","WCharId","getIndexById","prevIx","prev","nextIx","next","splice","Client","clientId","buffer","subscribers","localClock","queue","empty","source","op","makeInsert","insert","char","setImmediate","broadcastValue","handler","push","type","operation","subscriber","previousQueueLength","processOperation","delete","unshift","processQueue","atVisible","broadcastOperation","makeDelete","window","Editor","onInsert","onDelete","React","cursor","setCursor","handleKeyDown","event","preventDefault","key","addEventListener","removeEventListener","style","whiteSpace","slice","EditorSession","server","current","setValue","on","apply","emit","onOperation","onValue","handleInsert","text","handleRemove","_count","ReactDOM","state","setState","io","document","getElementById"],"mappings":"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","file":"static/js/main.57b20857.chunk.js","sourcesContent":["export type t = { client: number; clock: number };\n\nexport function compare(a: t, b: t): -1 | 0 | 1 {\n  if (a.client === b.client) {\n    if (a.clock === b.clock) return 0;\n    return a.clock < b.clock ? -1 : 1;\n  } else {\n    return a.client < b.client ? -1 : 1;\n  }\n}\n\nexport function le(a: t, b: t): boolean {\n  return compare(a, b) === -1;\n}\n\nexport function eq(a: t, b: t): boolean {\n  return compare(a, b) === 0;\n}\n\nexport const beg: t = { client: -1, clock: 0 };\nexport const fin: t = { client: -1, clock: 1 };\n","import * as WCharId from \"./wcharid\";\nimport * as WChar from \"./wchar\";\n\nexport class WString {\n  public chars: WChar.t[];\n\n  constructor(chars: WChar.t[]) {\n    this.chars = chars;\n  }\n\n  public static empty(): WString {\n    return new WString([WChar.beg, WChar.fin]);\n  }\n\n  public value(): string {\n    return this.chars\n      .filter(wc => wc.visible)\n      .map(wc => wc.value)\n      .join(\"\");\n  }\n\n  public length(): number {\n    return this.chars.filter(wc => wc.visible).length;\n  }\n\n  public atVisible(index: number): WChar.t {\n    for (let i = 0; i < this.chars.length; i++) {\n      if (this.chars[i].visible) {\n        if (index === 0) return this.chars[i];\n        index -= 1;\n      }\n    }\n\n    return WChar.fin;\n  }\n\n  private getIndexById(id: WCharId.t): number | null {\n    const ix = this.chars.findIndex(wc => WCharId.eq(wc.id, id));\n    return ix === -1 ? null : ix;\n  }\n\n  public insert(wc: WChar.t): boolean {\n    if (this.getIndexById(wc.id) != null) return true;\n\n    const prevIx = this.getIndexById(wc.prev);\n    const nextIx = this.getIndexById(wc.next);\n    if (prevIx == null || nextIx == null) return false;\n\n    for (let i = prevIx + 1; i <= nextIx; i++) {\n      if (WCharId.le(wc.id, this.chars[i].id)) {\n        this.chars.splice(i, 0, wc);\n        return true;\n      }\n    }\n\n    this.chars.splice(nextIx, 0, wc);\n    return true;\n  }\n\n  public delete(wc: WChar.t): boolean {\n    const ix = this.getIndexById(wc.id);\n    if (ix == null) return false;\n    this.chars[ix].visible = false;\n    return true;\n  }\n}\n","import * as WCharId from \"./wcharid\";\n\nexport type t = {\n  id: WCharId.t;\n  prev: WCharId.t;\n  next: WCharId.t;\n  visible: boolean;\n  value: string;\n};\n\nexport const beg: t = {\n  id: WCharId.beg,\n  prev: WCharId.beg,\n  next: WCharId.fin,\n  visible: false,\n  value: \"\"\n};\n\nexport const fin: t = {\n  id: WCharId.fin,\n  prev: WCharId.beg,\n  next: WCharId.fin,\n  visible: false,\n  value: \"\"\n};\n","import * as WChar from \"./wchar\";\nimport { WString } from \"./wstring\";\n\nexport type Operation =\n  | { type: \"insert\"; char: WChar.t }\n  | { type: \"delete\"; char: WChar.t };\n\ntype Subscriber =\n  | { type: \"value\"; handler(value: string): void }\n  | { type: \"operation\"; handler(operation: Operation): void };\n\nexport class Client {\n  public buffer: WString;\n  private subscribers: Subscriber[] = [];\n  private clientId: number;\n  private localClock = 0;\n  private queue: Operation[] = [];\n\n  constructor(clientId: number, chars?: WChar.t[]) {\n    if (chars) {\n      this.buffer = new WString(chars);\n    } else {\n      this.buffer = WString.empty();\n    }\n    this.clientId = clientId;\n  }\n\n  public setText(source: string) {\n    for (let i = 0; i < source.length; i++) {\n      const op = this.makeInsert(i, source[i]);\n      this.buffer.insert(op.char);\n    }\n\n    setImmediate(() => {\n      this.broadcastValue();\n    });\n  }\n\n  public onValue(handler: (value: string) => void) {\n    this.subscribers.push({ type: \"value\", handler });\n  }\n\n  public onOperation(handler: (operation: Operation) => void) {\n    this.subscribers.push({ type: \"operation\", handler });\n  }\n\n  private broadcastOperation(operation: Operation) {\n    for (const subscriber of this.subscribers) {\n      if (subscriber.type === \"operation\") {\n        subscriber.handler(operation);\n      }\n    }\n  }\n\n  private broadcastValue() {\n    const value = this.value();\n    for (const subscriber of this.subscribers) {\n      if (subscriber.type === \"value\") {\n        subscriber.handler(value);\n      }\n    }\n  }\n\n  private processQueue() {\n    let previousQueueLength;\n\n    do {\n      previousQueueLength = this.queue.length;\n      for (let i = 0; i < this.queue.length; i++) {\n        if (this.processOperation(this.queue[i])) {\n          this.queue.splice(i, 1);\n          i -= 1;\n        }\n      }\n    } while (this.queue.length < previousQueueLength);\n  }\n\n  private processOperation(op: Operation) {\n    switch (op.type) {\n      case \"insert\":\n        return this.buffer.insert(op.char);\n      case \"delete\":\n        return this.buffer.delete(op.char);\n    }\n  }\n\n  public apply(op: Operation) {\n    this.queue.unshift(op);\n    this.processQueue();\n    this.broadcastValue();\n  }\n\n  private makeInsert(i: number, char: string): Operation {\n    const prev = i === 0 ? WChar.beg : this.buffer.atVisible(i - 1);\n    const next =\n      i === this.buffer.length() ? WChar.fin : this.buffer.atVisible(i);\n\n    const char_: WChar.t = {\n      id: { client: this.clientId, clock: this.localClock++ },\n      prev: prev.id,\n      next: next.id,\n      visible: true,\n      value: char\n    };\n\n    return { type: \"insert\", char: char_ };\n  }\n\n  private makeDelete(i: number): Operation {\n    const char = this.buffer.atVisible(i);\n    return { type: \"delete\", char };\n  }\n\n  public insert(i: number, char: string) {\n    const op = this.makeInsert(i, char);\n    this.buffer.insert(op.char);\n    this.broadcastOperation(op);\n    this.broadcastValue();\n  }\n\n  public delete(i: number) {\n    const op = this.makeDelete(i);\n    this.buffer.delete(op.char);\n    this.broadcastOperation(op);\n    this.broadcastValue();\n  }\n\n  public value(): string {\n    return this.buffer.value();\n  }\n}\n(window as any).Client = Client;\n","import * as React from \"react\";\n\ntype EditorProps = {\n  value: string;\n  onInsert(index: number, text: string): void;\n  onDelete(index: number, count: number): void;\n};\n\nexport function Editor({ value, onInsert, onDelete }: EditorProps) {\n  const [cursor, setCursor] = React.useState(0);\n\n  React.useEffect(() => {\n    if (cursor > value.length) setCursor(value.length);\n    if (cursor < 0) setCursor(0);\n  }, [value, cursor]);\n\n  React.useEffect(() => {\n    function handleKeyDown(event: KeyboardEvent) {\n      event.preventDefault();\n\n      if (event.key === \"Backspace\") {\n        onDelete(cursor - 1, 1);\n        setCursor(cursor - 1);\n      } else if (event.key === \"ArrowLeft\") {\n        setCursor(cursor => cursor - 1);\n      } else if (event.key === \"ArrowRight\") {\n        setCursor(cursor => cursor + 1);\n      } else if (event.key.length === 1) {\n        onInsert(cursor, event.key);\n        setCursor(cursor + 1);\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, [onDelete, onInsert, cursor]);\n\n  return (\n    <div>\n      <span style={{ whiteSpace: \"pre\" }}>{value.slice(0, cursor)}</span>\n      <span>_</span>\n      <span style={{ whiteSpace: \"pre\" }}>{value.slice(cursor)}</span>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport io from \"socket.io-client\";\n\nimport * as WChar from \"./wchar\";\nimport { Client, Operation } from \"./client\";\nimport { Editor } from \"./editor\";\n\nfunction EditorSession({\n  server,\n  clientId,\n  chars\n}: {\n  server: SocketIOClient.Socket;\n  clientId: number;\n  chars: WChar.t[] | undefined;\n}) {\n  const client = React.useRef(new Client(clientId, chars));\n  const [value, setValue] = React.useState(client.current.value());\n\n  React.useEffect(() => {\n    server.on(\"op\", (op: Operation) => {\n      client.current.apply(op);\n    });\n\n    server.on(\"get-chars\", () => {\n      server.emit(\"get-chars\", client.current.buffer.chars);\n    });\n\n    client.current.onOperation(op => server.emit(\"op\", op));\n    client.current.onValue(setValue);\n  }, []);\n\n  const handleInsert = React.useCallback((i, text) => {\n    client.current.insert(i, text);\n  }, []);\n\n  const handleRemove = React.useCallback((i, _count) => {\n    client.current.delete(i);\n  }, []);\n\n  return (\n    <Editor value={value} onInsert={handleInsert} onDelete={handleRemove} />\n  );\n}\n\nfunction App() {\n  const server = React.useRef<SocketIOClient.Socket>();\n  const [state, setState] = React.useState<{\n    clientId: number;\n    chars: WChar.t[] | undefined;\n  } | null>(null);\n\n  React.useEffect(() => {\n    server.current = io(\"http://51.15.42.84:3001\");\n    server.current.on(\"init\", setState);\n  }, []);\n\n  if (state == null || server.current == null) {\n    return <div>connecting...</div>;\n  } else {\n    return (\n      <EditorSession\n        clientId={state.clientId}\n        server={server.current}\n        chars={state.chars}\n      />\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}